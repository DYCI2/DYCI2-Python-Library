#!/usr/bin/python3.5
# -*-coding:Utf-8 -*

#############################################################################
# GeneratorBuilder_tutorial.py 
# Jérôme Nika, IRCAM STMS Lab
# copyleft 2016 - 2018
#############################################################################

""" 
Generator Builder Tutorial
===========================
Tutorial for the tools and functions for the automatic instanciation of :class:`~Generator.Generator` objects and :class:`~GenerationHandler.Generator` objects from annotation files defined in :mod:`GeneratorBuilder`.

"""

from DYCI2_Modules.CorpusBuilder import *
from DYCI2_Modules.Generator import *
import os

current_dir = os.path.dirname(os.path.abspath(__file__))

##################################
## A) FROM ANNOTATION FILE TO JSON
##################################
# IF NECESSARY: BUILD AND WRITE A JSON FILE DESCRIBING A MEMORY : See CorpusBuilder_tutorial.py
C = CorpusBuilder()
path_annotations_file = "/Users/jnika/Google Drive/Dev/Python/Dev/MyAlgos/_DYCI2/Corpus/TestBuildFromText"
path_memory_json_file = path_annotations_file+"3"
options_build_corpus = {"keys": ["GramLabel","Word"], "segtype": "beats"}
C.build_corpus(path_memory_json_file, options = options_build_corpus)


#1) BUILD A GENERATOR FROM A JSON FILE DESCRIBING A MEMORY
print("1) BUILD A GENERATOR FROM A JSON FILE DESCRIBING A MEMORY\n")

path_json_file = path_memory_json_file+".json"
generation_handler = new_generation_handler_from_json_file(path_json_file = path_json_file, keys_labels = "GramLabel" , keys_contents = "Word")
# # # OR # # # 
# #1.1) CHOSE A DICT DESCRIBING A MEMORY (E.G. LOADING A JSON FILE DESCRIBING A MEMORY)
# if not os.path.isfile(path_json_file):
# 	print "Need a valid json file"
# with open(path_json_file, 'r') as jfile:
# 	dict_memory = json.load(jfile)
# #1.2) BUILD A GENERATOR FROM A DICT DESCRIBING A MEMORY
# generation_handler = new_generation_handler_from_dict_memory(dict_memory = dict_memory, keys_labels = "GramLabel" , keys_contents = "Word")
# # # # # # # 
generation_handler.memory.print_model()


#2) GENERATION: EXAMPLES
print("\n\n2) GENERATION: EXAMPLES\n")

generation_handler.start()
generation_handler.memory.max_continuity = 4
query= new_temporal_query_free_sequence_of_events(length = 12, start_date = 0, start_type = "absolute")
print("\n/!\ Receiving and processing a new query: /!\ \n{}".format(query))
generation_handler.process_query(query = query,  print_info = False)
print("Output of the run: \n{}".format(generation_handler.current_generation_output))

generation_handler.memory.max_continuity = 3
scenario = ["Art", "Adj","Noun", "Verb", "Prep", "Det", "Adj", "Noun"]
query= new_temporal_query_sequence_of_events(scenario)
print("\n/!\ Receiving and processing a new query: /!\ \n{}".format(query))
generation_handler.process_query(query = query,  print_info = False)
print("Output of the run: {}".format(generation_handler.current_generation_output))

#3) CHAINING AGENTS: EXAMPLES
print("\n\n3) CHAINING AGENTS: EXAMPLES\n")

generation_handler_2 = new_generation_handler_from_json_file(path_json_file = path_json_file, keys_labels = "GramLabel" , keys_contents = "GramLabel")
generation_handler_2.start()
generation_handler_2.memory.max_continuity = 3
query= new_temporal_query_free_sequence_of_events(length = 20, start_date = 0, start_type = "absolute")
generation_handler_2.process_query(query = query,  print_info = False)
generated_scenario = generation_handler_2.current_generation_output
print("Scenario generated by a first generator: {}".format(generated_scenario))

generation_handler.memory.max_continuity = 5
query= new_temporal_query_sequence_of_events(generated_scenario)
generation_handler.process_query(query = query,  print_info = False)
print("Output of the run of the second generator: {}".format(generation_handler.current_generation_output))








